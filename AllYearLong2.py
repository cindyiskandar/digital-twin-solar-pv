import datetime, pytz, time, csv
import pandas as pd
import numpy as np
import pvlib
import matplotlib.pyplot as plt

# THIS CODE IS USED TO TEST THE SOLAR EDUCATIONAL ARRAY MODEL ALL YEAR LONG + ADDITIONAL OBSERVATIONS

latitude=55.865408

# Weather Data Monthly Average
hourly_tmy_df = pd.read_csv('HourlyTmy.csv')
weather_data = hourly_tmy_df[['PeriodEnd', 'PeriodStart','AirTemp', 'Azimuth', 'CloudOpacity', 'Dhi', 'Dni', 'Ghi', 'WindSpeed10m', 'Zenith']]

#weather_data = hourly_tmy_df[['PeriodEnd', 'PeriodStart','AirTemp', 'Azimuth', 'CloudOpacity', 'Dhi', 'Dni', 'Ghi', 'Zenith']]
#weather_data['wind_speed']=pd.Series()

'''for index in range(len(weather_data)):
    weather_data.iloc[index, 9] = 1

print(weather_data)'''

# Calculation of the Solar Power Generated by the Array

# Data regarding the solar panels and inverter
tilt_angle = 20 # degrees
surface_azimuth = 180 # degrees (panels facing south)
optimal_winter_tilt_angle = latitude + 15 # degrees
optimal_summer_tilt_angle = latitude - 15 # degrees


power_dc_solar_panel = 335 # Watts
power_dc_array_1 = 12 * power_dc_solar_panel
power_dc_array_2 = 12 * power_dc_solar_panel
total_dc_power_panels = power_dc_array_1 + power_dc_array_2

power_STC = 335 # Watts
power_NOCT = 253 # Watts
module_length = 1.698 # meters
module_width = 1.004 # meters
module_area = module_length * module_width
number_of_cells = 120
I_sc_ref = 10.20 # Amps
V_oc_ref = 42.6 # Volts
I_mp_ref = 9.69 # Amps
V_mp_ref = 34.6 # Volts

T_coef_I_sc = 0.05 # %/K
T_coef_V_oc = -0.29 # %/K
gamma_pdc_solar_panel = - 0.37 / 100 # -0.37 %/K
alpha_sc = T_coef_I_sc * I_sc_ref / 272.15 # A/ deg C
beta_oc = T_coef_V_oc * V_oc_ref / 272.15 # V/ deg C
gamma_pdc_solar_panel_celsius = gamma_pdc_solar_panel * power_STC / 272.15 # %/deg C

# Inverter Parameters
inverter_efficiency = 0.968 # 96.8%
inverter_power_dc = 8900 # Watts
inverter_power_ac = 8000

# 6k Inverter Parameters
inverter_power_ac_6k = 6000

# 7k Inverter Parameters
inverter_power_ac_7k = 7000

# Get the POA (Plane Of Array) Irradiance (With fixed Mount)
df_poa = pvlib.irradiance.get_total_irradiance(
        surface_tilt = tilt_angle,  # tilted 20 degrees from horizontal
        surface_azimuth = surface_azimuth,  # facing South
        dni = weather_data['Dni'],
        ghi = weather_data['Ghi'],
        dhi = weather_data['Dhi'],
        solar_zenith = weather_data['Zenith'],
        solar_azimuth = weather_data['Azimuth'],
        model='isotropic')

# Then we add the calculations of the cell temperature 
# Calculate Cell/Module Temperature
all_parameters = pvlib.temperature.TEMPERATURE_MODEL_PARAMETERS['sapm']
parameters = all_parameters['open_rack_glass_polymer']

cell_temperature_fixed = pvlib.temperature.sapm_cell(
    df_poa['poa_global'], weather_data['AirTemp'], weather_data['WindSpeed10m'], **parameters)

# Calculate the power output of the array

# PVWatts Method
# With fixed panels

dc_power_output_config_1 = pvlib.pvsystem.pvwatts_dc(df_poa['poa_global'], cell_temperature_fixed, power_dc_array_1, gamma_pdc_solar_panel_celsius)
dc_power_output_config_2 = pvlib.pvsystem.pvwatts_dc(df_poa['poa_global'], cell_temperature_fixed, power_dc_array_2, gamma_pdc_solar_panel_celsius)
ac_power_output = pvlib.inverter.pvwatts_multi([dc_power_output_config_1, dc_power_output_config_2], inverter_power_ac/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

ac_power_output_df = ac_power_output.to_frame()
ac_power_output_df.columns = ['AC_Power']

start_date = datetime.datetime(2021, 1, 1)
end_date = datetime.datetime(2022, 1, 1)
delta = datetime.timedelta(hours=1)
for index in range(len(weather_data)):
    if start_date < end_date:
        weather_data.iloc[index, 0] = start_date
        start_date += delta

ac_power_output_df['end_period'] = pd.Series(np.float64)
ac_power_output_df['end_period'] = weather_data['PeriodEnd'].fillna(0)
ac_power_output_df['inverter_limit'] = pd.Series(np.float64)
ac_power_output_df['inverter_power_ac_6k'] = pd.Series(np.float64)
ac_power_output_df['inverter_power_ac_7k'] = pd.Series(np.float64)

for index in range(len(ac_power_output_df)):
    ac_power_output_df.iloc[index, 2] = inverter_power_ac
    ac_power_output_df.iloc[index, 3] = inverter_power_ac_6k
    ac_power_output_df.iloc[index, 4] = inverter_power_ac_7k    

#print(ac_power_output_df)
    

#ac_power_output_df = ac_power_output_df.set_index(['end_period'])

#ac_power_output_df.to_csv('Trial_CSV_1.csv', index = False)

# Plot the power generated by the Easter Bush Educational Solar Array
'''
ax = ac_power_output_df.plot(x = 'end_period', y = 'AC_Power')
ax2 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_limit', ax = ax)
ax3 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)

plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array all year long")
plt.show()

ax = ac_power_output_df.plot(x = 'end_period', y = 'AC_Power')
ax2 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_limit', ax = ax)
ax3 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)

plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array all year long")
plt.show()

# From 1 January till 31 March
ax = ac_power_output_df.head(2159).plot(x = 'end_period', y = 'AC_Power')
ax2 = ac_power_output_df.head(2159).plot(x = 'end_period', y = 'inverter_limit', ax = ax)
ax3 = ac_power_output_df.head(2159).plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.head(2159).plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)

plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array from 1 January till 31 March")
plt.show()

# From 1 April till 1 September
ax = ac_power_output_df.iloc[2160:5831].plot(x = 'end_period', y='AC_Power')
ax2 = ac_power_output_df.iloc[2160:5831].plot(x = 'end_period', y = 'inverter_limit', ax = ax)
ax3 = ac_power_output_df.iloc[2160:5831].plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.iloc[2160:5831].plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)

plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array from 1 April till 1 September")
plt.show()

# From 1 September till 31 December
ax = ac_power_output_df.iloc[5832:len(ac_power_output_df)].plot(x = 'end_period', y='AC_Power')
ax2 = ac_power_output_df.iloc[5832:len(ac_power_output_df)].plot(x = 'end_period', y = 'inverter_limit', ax = ax)
ax3 = ac_power_output_df.iloc[5832:len(ac_power_output_df)].plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.iloc[5832:len(ac_power_output_df)].plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)

plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array from 1 September till 31 December")
plt.show()
'''


# For different inverter sizes
ac_power_output_6k = pvlib.inverter.pvwatts_multi([dc_power_output_config_1, dc_power_output_config_2], inverter_power_ac_6k/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

ac_power_output_6k_df = ac_power_output_6k.to_frame()
ac_power_output_6k_df.columns = ['AC_Power_6k']

ac_power_output_6k_df['end_period'] = pd.Series(np.float64)
ac_power_output_6k_df['end_period'] = weather_data['PeriodEnd'].fillna(0)

ac_power_output_7k = pvlib.inverter.pvwatts_multi([dc_power_output_config_1, dc_power_output_config_2], inverter_power_ac_7k/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

ac_power_output_7k_df = ac_power_output_6k.to_frame()
ac_power_output_7k_df.columns = ['AC_Power_7k']

ac_power_output_7k_df['end_period'] = pd.Series(np.float64)
ac_power_output_7k_df['end_period'] = weather_data['PeriodEnd'].fillna(0)

'''
ax = ac_power_output_df.plot(x = 'end_period', y = 'AC_Power')
ax2 = ac_power_output_7k_df.plot(x = 'end_period', y = 'AC_Power_7k', ax = ax)
ax3 = ac_power_output_6k_df.plot(x = 'end_period', y = 'AC_Power_6k', ax = ax2)


plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array all year long with 6kW, 7kW and 8kW inverters")
plt.show()
'''

# For different tilt angles
df_poa_winter = pvlib.irradiance.get_total_irradiance(
    surface_tilt = optimal_winter_tilt_angle,  # optimal tilt angle for the winter
    surface_azimuth = surface_azimuth,  # facing South
    dni=weather_data['Dni'],
    ghi=weather_data['Ghi'],
    dhi=weather_data['Dhi'],
    solar_zenith=weather_data['Zenith'],
    solar_azimuth=weather_data['Azimuth'],
    model='isotropic')

df_poa_summer = pvlib.irradiance.get_total_irradiance(
    surface_tilt = optimal_summer_tilt_angle,  # optimal tilt angle for the summer 
    surface_azimuth = surface_azimuth,  # facing South
    dni=weather_data['Dni'],
    ghi=weather_data['Ghi'],
    dhi=weather_data['Dhi'],
    solar_zenith=weather_data['Zenith'],
    solar_azimuth=weather_data['Azimuth'],
    model='isotropic')

# Get the POA Irradiance (With Single Axis Tracking)
tracker_data = pvlib.tracking.singleaxis(
    weather_data['Zenith'],
    weather_data['Azimuth'],
    axis_azimuth = 180,  # axis is aligned N-S
    )  # leave the rest of the singleaxis parameters like backtrack and gcr at their defaults
tilt = tracker_data['surface_tilt'].fillna(0)
azimuth = tracker_data['surface_azimuth'].fillna(0)


df_poa_tracker = pvlib.irradiance.get_total_irradiance(
    surface_tilt = tilt,  # time series for tracking array
    surface_azimuth = azimuth,  # time series for tracking array
    dni = weather_data['Dni'],
    ghi = weather_data['Ghi'],
    dhi = weather_data['Dhi'],
    solar_zenith = weather_data['Zenith'],
    solar_azimuth = weather_data['Azimuth'])
tracker_poa = df_poa_tracker['poa_global']


cell_temperature_winter = pvlib.temperature.sapm_cell(
    df_poa_winter['poa_global'], weather_data['AirTemp'], weather_data['WindSpeed10m'], **parameters)

cell_temperature_summer = pvlib.temperature.sapm_cell(
    df_poa_summer['poa_global'], weather_data['AirTemp'], weather_data['WindSpeed10m'], **parameters)

cell_temperature_tracker = pvlib.temperature.sapm_cell(
    tracker_poa, weather_data['AirTemp'], weather_data['WindSpeed10m'], **parameters)

dc_power_winter_1 = pvlib.pvsystem.pvwatts_dc(df_poa_winter['poa_global'], cell_temperature_winter, power_dc_array_1, gamma_pdc_solar_panel_celsius)
dc_power_winter_2 = pvlib.pvsystem.pvwatts_dc(df_poa_winter['poa_global'], cell_temperature_winter, power_dc_array_2, gamma_pdc_solar_panel_celsius)
ac_power_winter = pvlib.inverter.pvwatts_multi([dc_power_winter_1, dc_power_winter_2], inverter_power_ac/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

dc_power_summer_1 = pvlib.pvsystem.pvwatts_dc(df_poa_summer['poa_global'], cell_temperature_summer, power_dc_array_1, gamma_pdc_solar_panel_celsius)
dc_power_summer_2 = pvlib.pvsystem.pvwatts_dc(df_poa_summer['poa_global'], cell_temperature_summer, power_dc_array_2, gamma_pdc_solar_panel_celsius)
ac_power_summer = pvlib.inverter.pvwatts_multi([dc_power_summer_1, dc_power_summer_2], inverter_power_ac/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

# With Single Axis Tracking
dc_power_tracker_1 = pvlib.pvsystem.pvwatts_dc(tracker_poa, cell_temperature_tracker, power_dc_array_1, gamma_pdc_solar_panel_celsius)
dc_power_tracker_2 = pvlib.pvsystem.pvwatts_dc(tracker_poa, cell_temperature_tracker, power_dc_array_2, gamma_pdc_solar_panel_celsius)
ac_power_tracker = pvlib.inverter.pvwatts_multi([dc_power_tracker_1, dc_power_tracker_2], inverter_power_ac/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

ac_power_winter_df = ac_power_winter.to_frame()
ac_power_summer_df = ac_power_summer.to_frame()
ac_power_tracker_df = ac_power_tracker.to_frame()

ac_power_winter_df.columns = ['AC_Power_Winter']
ac_power_summer_df.columns = ['AC_Power_Summer']
ac_power_tracker_df.columns = ['AC_Power_tracker']

ac_power_summer_df['end_period'] = pd.Series(np.float64)
ac_power_winter_df['end_period'] = pd.Series(np.float64)
ac_power_tracker_df['end_period'] = pd.Series(np.float64)

ac_power_output_df['end_period'] = weather_data['PeriodEnd'].fillna(0)
ac_power_winter_df['end_period'] = weather_data['PeriodEnd'].fillna(0)
ac_power_summer_df['end_period'] = weather_data['PeriodEnd'].fillna(0)
ac_power_tracker_df['end_period'] = weather_data['PeriodEnd'].fillna(0)

# When the inverter is 6k
ac_power_winter_6k = pvlib.inverter.pvwatts_multi([dc_power_winter_1, dc_power_winter_2], inverter_power_ac_6k/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)
ac_power_summer_6k = pvlib.inverter.pvwatts_multi([dc_power_summer_1, dc_power_summer_2], inverter_power_ac_6k/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)
ac_power_tracker_6k = pvlib.inverter.pvwatts_multi([dc_power_tracker_1, dc_power_tracker_2], inverter_power_ac_6k/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

ac_power_winter_6k_df = ac_power_winter_6k.to_frame()
ac_power_summer_6k_df = ac_power_summer_6k.to_frame()
ac_power_tracker_6k_df = ac_power_tracker_6k.to_frame()

ac_power_winter_6k_df.columns = ['AC_Power_Winter_6k']
ac_power_summer_6k_df.columns = ['AC_Power_Summer_6k']
ac_power_tracker_6k_df.columns = ['AC_Power_tracker_6k']

ac_power_summer_6k_df['end_period'] = pd.Series(np.float64)
ac_power_winter_6k_df['end_period'] = pd.Series(np.float64)
ac_power_tracker_6k_df['end_period'] = pd.Series(np.float64)

ac_power_output_6k_df['end_period'] = weather_data['PeriodEnd'].fillna(0)
ac_power_winter_6k_df['end_period'] = weather_data['PeriodEnd'].fillna(0)
ac_power_summer_6k_df['end_period'] = weather_data['PeriodEnd'].fillna(0)
ac_power_tracker_6k_df['end_period'] = weather_data['PeriodEnd'].fillna(0)

ac_power_summer_df['inverter_power_ac_6k'] = pd.Series(np.float64)
ac_power_winter_df['inverter_power_ac_6k'] = pd.Series(np.float64)
ac_power_tracker_df['inverter_power_ac_6k'] = pd.Series(np.float64)

for index in range(len(ac_power_output_df)):
    ac_power_winter_df.iloc[index, 2] = inverter_power_ac_6k
    ac_power_summer_df.iloc[index, 2] = inverter_power_ac_6k
    ac_power_tracker_df.iloc[index, 2] = inverter_power_ac_6k  

# Plots for the diff. tilt angles
'''
ax = ac_power_winter_df.plot(x = 'end_period', y = 'AC_Power_Winter')
ax2 = ac_power_output_df.plot(x = 'end_period', y = 'AC_Power', ax = ax)
ax3 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)
ax5 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_limit', ax = ax4)


plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array all year long for different tilt angles")
plt.show()

ax = ac_power_summer_df.plot(x = 'end_period', y = 'AC_Power_Summer')
ax2 = ac_power_output_df.plot(x = 'end_period', y = 'AC_Power', ax = ax)
ax3 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)
ax5 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_limit', ax = ax4)

plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array all year long for different tilt angles")
plt.show()

ax = ac_power_summer_df.plot(x = 'end_period', y = 'AC_Power_Summer')
ax2 = ac_power_winter_df.plot(x = 'end_period', y = 'AC_Power_Winter', ax = ax)
ax3 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)
ax5 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_limit', ax = ax4)

plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array all year long for different tilt angles")
plt.show()

ax = ac_power_output_df.plot(x = 'end_period', y = 'AC_Power')
ax2 = ac_power_tracker_df.plot(x = 'end_period', y = 'AC_Power_tracker', ax = ax)
ax3 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_6k', ax = ax2)
ax4 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_power_ac_7k', ax = ax3)
ax5 = ac_power_output_df.plot(x = 'end_period', y = 'inverter_limit', ax = ax4)

plt.ylabel("AC Power (W)")
plt.title("Power generated by the Easter Bush Solar Array all year long for different tilt angles")
plt.show()
'''

# Calculate the difference between the powers with a 6kW and 8kW inverter
triage = ac_power_output_df.loc[ac_power_output_df['AC_Power'] >= 6000]

difference = triage['AC_Power'].subtract(triage['inverter_power_ac_6k'])

total = round(difference.sum(),3)
print('Total: ',total)

# Calculate the difference for winter
winter_triage = ac_power_winter_df.loc[ac_power_winter_df['AC_Power_Winter'] >= 6000]

winter_difference = winter_triage['AC_Power_Winter'].subtract(winter_triage['inverter_power_ac_6k'])

total_winter = round(winter_difference.sum(),3)
print('Total winter ', total_winter)

# Calculate the difference for summer
summer_triage = ac_power_summer_df.loc[ac_power_summer_df['AC_Power_Summer'] >= 6000]

summer_difference = summer_triage['AC_Power_Summer'].subtract(summer_triage['inverter_power_ac_6k'])

total_summer = round(summer_difference.sum(),3)
print('Total summer ', total_summer)


# Calculate the difference for trackers
tracker_triage = ac_power_tracker_df.loc[ac_power_tracker_df['AC_Power_tracker'] >= 6000]

tracker_difference = tracker_triage['AC_Power_tracker'].subtract(tracker_triage['inverter_power_ac_6k'])

total_tracker = round(tracker_difference.sum(),3)
print('Total tracker ', total_tracker)
