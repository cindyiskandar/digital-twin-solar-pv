import datetime, pytz, time, csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pvlib


# Weather Data Monthly Average
hourly_tmy_df = pd.read_csv('Hourly_TMY_June.csv')
hourly_tmy = hourly_tmy_df[['PeriodEnd', 'PeriodStart','AirTemp', 'Azimuth', 'CloudOpacity', 'Dhi', 'Dni', 'Ghi', 'WindSpeed10m', 'Zenith']]
column_names = ['PeriodEnd', 'PeriodStart','AirTemp', 'Azimuth', 'CloudOpacity', 'Dhi', 'Dni', 'Ghi', 'WindSpeed10m', 'Zenith']

weather_data = pd.DataFrame(columns = column_names)
array_columns = np.arange(2,10,1)

for i in range(24):
    array_rows = np.arange(i,len(hourly_tmy),24)
    df = hourly_tmy.iloc[array_rows,array_columns]
    mean = df[['AirTemp', 'Azimuth', 'CloudOpacity', 'Dhi', 'Dni', 'Ghi', 'WindSpeed10m', 'Zenith']].mean()
    mean_df = mean.to_frame().transpose()
    weather_data = weather_data.append(mean_df)
    weather_data.iloc[i,[0,1]] = hourly_tmy.iloc[i,[0,1]]

#weather_data = weather_data.set_index(['PeriodEnd'])
#weather_data['period_end_local_timezone'] = pd.Series(np.float64)

#print(weather_data)

start_date = datetime.datetime(2021, 6, 1)
end_date = datetime.datetime(2021, 6, 2)
delta = datetime.timedelta(hours=1)
for index in range(len(weather_data)):
    if start_date < end_date:
        weather_data.iloc[index, 0] = start_date
        start_date += delta

#print(weather_data)

# Calculation of the Solar Power Generated by the Array

# Data regarding the solar panels and inverter
tilt_angle = 20 # degrees
surface_azimuth = 180 # degrees (panels facing south)

power_dc_solar_panel = 335 # Watts
power_dc_array = 20 * power_dc_solar_panel
dc_power_config_1 = 15 * power_dc_array
dc_power_config_2 = 14 * power_dc_array

power_STC = 335 # Watts
power_NOCT = 253 # Watts
module_length = 1.698 # meters
module_width = 1.004 # meters
module_area = module_length * module_width
number_of_cells = 120
I_sc_ref = 10.20 # Amps
V_oc_ref = 42.6 # Volts
I_mp_ref = 9.69 # Amps
V_mp_ref = 34.6 # Volts

T_coef_I_sc = 0.05 # %/K
T_coef_V_oc = -0.29 # %/K
gamma_pdc_solar_panel = - 0.37 / 100 # -0.37 %/K
alpha_sc = T_coef_I_sc * I_sc_ref / 272.15 # A/ deg C
beta_oc = T_coef_V_oc * V_oc_ref / 272.15 # V/ deg C
gamma_pdc_solar_panel_celsius = gamma_pdc_solar_panel * power_STC / 272.15 # %/deg C

# Inverter Parameters
inverter_efficiency = 0.983 # 98.3%
inverter_power_dc = 112000 # Watts
inverter_power_ac = 80000


# Get the POA (Plane Of Array) Irradiance (With fixed Mount)
df_poa = pvlib.irradiance.get_total_irradiance(
        surface_tilt = tilt_angle,  # tilted 20 degrees from horizontal
        surface_azimuth = surface_azimuth,  # facing South
        dni = weather_data['Dni'],
        ghi = weather_data['Ghi'],
        dhi = weather_data['Dhi'],
        solar_zenith = weather_data['Zenith'],
        solar_azimuth = weather_data['Azimuth'],
        model='isotropic')

# Then we add the calculations of the cell temperature 
# Calculate Cell/Module Temperature
all_parameters = pvlib.temperature.TEMPERATURE_MODEL_PARAMETERS['sapm']
parameters = all_parameters['open_rack_glass_polymer']

cell_temperature_fixed = pvlib.temperature.sapm_cell(
    df_poa['poa_global'], weather_data['AirTemp'], weather_data['WindSpeed10m'], **parameters)


# Calculate the power output of the array
# PVWatts Method
# With fixed panels

dc_power_output_config_1 = pvlib.pvsystem.pvwatts_dc(df_poa['poa_global'], cell_temperature_fixed, dc_power_config_1, gamma_pdc_solar_panel_celsius)
ac_power_output_config_1 = pvlib.inverter.pvwatts(dc_power_output_config_1, inverter_power_ac/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

dc_power_output_config_2 = pvlib.pvsystem.pvwatts_dc(df_poa['poa_global'], cell_temperature_fixed, dc_power_config_2, gamma_pdc_solar_panel_celsius)
ac_power_output_config_2 = pvlib.inverter.pvwatts(dc_power_output_config_2, inverter_power_ac/inverter_efficiency, inverter_efficiency, eta_inv_ref=0.9637)

ac_power_output = 14 * ac_power_output_config_1 + ac_power_output_config_2
ac_power_output_df = ac_power_output.to_frame()
ac_power_output_df.columns = ['AC_Power']

ac_power_output_df['end_period'] = pd.Series(np.float64)
ac_power_output_df['end_period'] = weather_data['PeriodEnd'].fillna(0)

ac_power_output_df['AC_Power'] = ac_power_output_df['AC_Power'].div(1e3)

print('Solar Power Data: ', ac_power_output_df)

#ac_power_output_df = ac_power_output_df.set_index(['end_period'])
ac_power_output_df = ac_power_output_df.reset_index()

max_values =ac_power_output_df['AC_Power'].nlargest(3).index

domestic_heaters = pd.DataFrame(ac_power_output_df, columns = ['AC_Power', 'end_period'])

for index in range(len(domestic_heaters)):
    domestic_heaters.iloc[index, 0] = 0

for index in max_values:
    domestic_heaters.iloc[index, 0] = 500

subtractionResults_1 = ac_power_output_df['AC_Power'] - domestic_heaters['AC_Power']

subtractionResults_1_df = subtractionResults_1.to_frame()
subtractionResults_1_df.columns = ['AC_Power']
subtractionResults_1_df['end_period'] = pd.Series(np.float64)
subtractionResults_1_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

#print('First subtraction: ', subtractionResults_1_df)

chillers_data = [0,
                 0,
                 0,
                 0,
                 0,
                 31.00000,	
                 74.00000,	
                 74.00000,	
                 69.00000,	
                 74.00000,	
                 74.00000,	
                 93.00000,	
                 74.00000,	
                 93.00000,	
                 74.00000,	
                 98.00000,	
                 93.00000,	
                 74.00000,	
                 93.00000,	
                 98.00000,	
                 69.00000,	
                 74.00000,	
                 69.00000,	
                 38.00000]

chillers_df = pd.DataFrame(data = chillers_data)
chillers_df.columns = ['AC_Power']
chillers_df['end_period'] = pd.Series(np.float64)
chillers_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

subtractionResults_2 = subtractionResults_1_df['AC_Power'] - chillers_df['AC_Power']

subtractionResults_2_df = subtractionResults_2.to_frame()
subtractionResults_2_df.columns = ['AC_Power']
subtractionResults_2_df['end_period'] = pd.Series(np.float64)
subtractionResults_2_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

for index in range(len(subtractionResults_2_df)):
    if subtractionResults_2_df.iloc[index, 0] < 0:
        subtractionResults_2_df.iloc[index, 0] = 0

#print('Second subtraction data: ', subtractionResults_2_df)

chillers_rated_power = 1600*2 #kW

# Now to fill the thermal store we need 100 kW of power for each chiller so 200 kW in total.
# We choose the highest value in the second subtraction

max_values_index = subtractionResults_2_df['AC_Power'].nlargest(1).index
max_value = subtractionResults_2_df['AC_Power'].nlargest(1)

power_to_fill_store = 200

values = subtractionResults_2_df.loc[subtractionResults_2_df['AC_Power'] >= power_to_fill_store]
values_index = values.index

chiller_power_thermal_store = pd.DataFrame(ac_power_output_df, columns = ['AC_Power', 'end_period'])

for index in range(len(chiller_power_thermal_store)):
    chiller_power_thermal_store.iloc[index, 0] = 0
'''
for index in values_index:
    thermal_store_filled = False
    chiller_power_thermal_store.iloc[index, 0] = power_to_fill_store
    
    total_chillers_power = chiller_power_thermal_store.iloc[index, 0] + chillers_df.iloc[index, 0]
    
    if total_chillers_power > chillers_rated_power:
        chiller_power_thermal_store.iloc[index, 0] = chillers_rated_power - chillers_df.iloc[index, 0]
        power_to_fill_store = power_to_fill_store - chiller_power_thermal_store.iloc[index, 0]
        values = subtractionResults_2_df.loc[subtractionResults_2_df['AC_Power'] >= power_to_fill_store]
        values_index = values.index
        thermal_store_filled = False
    
    sum = chiller_power_thermal_store['AC_Power'].sum()
    
    if sum > 200:
        chiller_power_thermal_store.iloc[index, 0] = 0
        thermal_store_filled = True
'''
for index in values_index:
    sum = chiller_power_thermal_store['AC_Power'].sum()
    
    if sum > 200:
        chiller_power_thermal_store.iloc[index, 0] = 0
    
    else:
        chiller_power_thermal_store.iloc[index, 0] = power_to_fill_store
        
        total_chillers_power = chiller_power_thermal_store.iloc[index, 0] + chillers_df.iloc[index, 0]
        
        if total_chillers_power > chillers_rated_power:
            chiller_power_thermal_store.iloc[index, 0] = chillers_rated_power - chillers_df.iloc[index, 0]
            power_to_fill_store = power_to_fill_store - chiller_power_thermal_store.iloc[index, 0]
            values = subtractionResults_2_df.loc[subtractionResults_2_df['AC_Power'] >= power_to_fill_store]
            values_index = values.index

subtractionResults_3 = subtractionResults_2_df['AC_Power'] - chiller_power_thermal_store['AC_Power']

subtractionResults_3_df = subtractionResults_3.to_frame()
subtractionResults_3_df.columns = ['AC_Power']
subtractionResults_3_df['end_period'] = pd.Series(np.float64)
subtractionResults_3_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

#print('Third subtraction data: ', subtractionResults_3_df)

freezer_farm = pd.DataFrame(ac_power_output_df, columns = ['AC_Power', 'end_period'])
for index in range(len(freezer_farm)):
    if subtractionResults_3_df.iloc[index, 0] >= 100:
        freezer_farm.iloc[index, 0] = 100
    else:
        freezer_farm.iloc[index, 0] = 50

subtractionResults_4 = subtractionResults_3_df['AC_Power'] - freezer_farm['AC_Power']

subtractionResults_4_df = subtractionResults_4.to_frame()
subtractionResults_4_df.columns = ['AC_Power']
subtractionResults_4_df['end_period'] = pd.Series(np.float64)
subtractionResults_4_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

for index in range(len(subtractionResults_4_df)):
    if subtractionResults_4_df.iloc[index, 0] < 0:
        subtractionResults_4_df.iloc[index, 0] = 0


#print('Fourth subtraction data: ', subtractionResults_4_df)

all_loads = pd.DataFrame(ac_power_output_df, columns = ['AC_Power', 'end_period'])
all_loads['AC_Power_1'] = pd.Series(np.float64)
all_loads['AC_Power_2'] = pd.Series(np.float64)
all_loads['AC_Power_3'] = pd.Series(np.float64)
all_loads['Total_loads'] = freezer_farm['AC_Power'] + chiller_power_thermal_store['AC_Power'] + chillers_df['AC_Power'] + domestic_heaters['AC_Power']
all_loads['AC_Power_1'] = domestic_heaters['AC_Power']
all_loads['AC_Power_2'] = chillers_df['AC_Power'] + chiller_power_thermal_store['AC_Power']
all_loads['AC_Power_3'] = freezer_farm['AC_Power']

# Loads
print('Domestic Water Heaters: ', domestic_heaters)
print('Chillers: ', chillers_df)
print('Chillers thermal store: ',chiller_power_thermal_store)
print('Freezer farm: ',freezer_farm)


print(all_loads)
print('-------------------')

# Power Generation
print('Solar Power: ', ac_power_output_df)
print('First subtraction data: ', subtractionResults_1_df)
print('Second subtraction data: ', subtractionResults_2_df)
print('Third subtraction data: ', subtractionResults_3_df)
print('Fourth subtraction data: ', subtractionResults_4_df)

print('-------------------')


# Plots
ax = ac_power_output_df.plot(x = 'end_period', y = 'AC_Power')
ax2 = all_loads.plot(x = 'end_period', y = 'AC_Power', ax = ax)

plt.ylabel("AC Power (kW)")
plt.title("Comparison between Generation and Load Profiles")
ac_power_output_df = ac_power_output_df.reset_index()

max_values =ac_power_output_df['AC_Power'].nlargest(3).index

domestic_heaters = pd.DataFrame(ac_power_output_df, columns = ['AC_Power', 'end_period'])

for index in range(len(domestic_heaters)):
    domestic_heaters.iloc[index, 0] = 0

for index in max_values:
    domestic_heaters.iloc[index, 0] = 500

subtractionResults_1 = ac_power_output_df['AC_Power'] - domestic_heaters['AC_Power']

subtractionResults_1_df = subtractionResults_1.to_frame()
subtractionResults_1_df.columns = ['AC_Power']
subtractionResults_1_df['end_period'] = pd.Series(np.float64)
subtractionResults_1_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

#print('First subtraction: ', subtractionResults_1_df)

chillers_data = [0,
                 0,
                 0,
                 0,
                 0,
                 31.00000,	
                 74.00000,	
                 74.00000,	
                 69.00000,	
                 74.00000,	
                 74.00000,	
                 93.00000,	
                 74.00000,	
                 93.00000,	
                 74.00000,	
                 98.00000,	
                 93.00000,	
                 74.00000,	
                 93.00000,	
                 98.00000,	
                 69.00000,	
                 74.00000,	
                 69.00000,	
                 38.00000]

chillers_df = pd.DataFrame(data = chillers_data)
chillers_df.columns = ['AC_Power']
chillers_df['end_period'] = pd.Series(np.float64)
chillers_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

subtractionResults_2 = subtractionResults_1_df['AC_Power'] - chillers_df['AC_Power']

subtractionResults_2_df = subtractionResults_2.to_frame()
subtractionResults_2_df.columns = ['AC_Power']
subtractionResults_2_df['end_period'] = pd.Series(np.float64)
subtractionResults_2_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

for index in range(len(subtractionResults_2_df)):
    if subtractionResults_2_df.iloc[index, 0] < 0:
        subtractionResults_2_df.iloc[index, 0] = 0

#print('Second subtraction data: ', subtractionResults_2_df)

chillers_rated_power = 1600*2 #kW

# Now to fill the thermal store we need 100 kW of power for each chiller so 200 kW in total.
# We choose the highest value in the second subtraction

max_values_index = subtractionResults_2_df['AC_Power'].nlargest(1).index
max_value = subtractionResults_2_df['AC_Power'].nlargest(1)

power_to_fill_store = 200

values = subtractionResults_2_df.loc[subtractionResults_2_df['AC_Power'] >= power_to_fill_store]
values_index = values.index

chiller_power_thermal_store = pd.DataFrame(ac_power_output_df, columns = ['AC_Power', 'end_period'])

for index in range(len(chiller_power_thermal_store)):
    chiller_power_thermal_store.iloc[index, 0] = 0

for index in values_index:
    thermal_store_filled = False
    chiller_power_thermal_store.iloc[index, 0] = power_to_fill_store
    
    total_chillers_power = chiller_power_thermal_store.iloc[index, 0] + chillers_df.iloc[index, 0]
    
    if total_chillers_power > chillers_rated_power:
        chiller_power_thermal_store.iloc[index, 0] = chillers_rated_power.iloc[index, 0] - chillers_df.iloc[index, 0]
        power_to_fill_store = power_to_fill_store - chiller_power_thermal_store.iloc[index, 0]
        values = subtractionResults_2_df.loc[subtractionResults_2_df['AC_Power'] >= power_to_fill_store]
        values_index = values.index
        thermal_store_filled = False
    
    sum = chiller_power_thermal_store['AC_Power'].sum()
    
    if sum > 200:
        chiller_power_thermal_store.iloc[index, 0] = 0
        thermal_store_filled = True

subtractionResults_3 = subtractionResults_2_df['AC_Power'] - chiller_power_thermal_store['AC_Power']

subtractionResults_3_df = subtractionResults_3.to_frame()
subtractionResults_3_df.columns = ['AC_Power']
subtractionResults_3_df['end_period'] = pd.Series(np.float64)
subtractionResults_3_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

#print('Third subtraction data: ', subtractionResults_3_df)

freezer_farm = pd.DataFrame(ac_power_output_df, columns = ['AC_Power', 'end_period'])
for index in range(len(freezer_farm)):
    if subtractionResults_3_df.iloc[index, 0] >= 100:
        freezer_farm.iloc[index, 0] = 100
    else:
        freezer_farm.iloc[index, 0] = 50

subtractionResults_4 = subtractionResults_3_df['AC_Power'] - freezer_farm['AC_Power']

subtractionResults_4_df = subtractionResults_4.to_frame()
subtractionResults_4_df.columns = ['AC_Power']
subtractionResults_4_df['end_period'] = pd.Series(np.float64)
subtractionResults_4_df['end_period'] = ac_power_output_df['end_period'].fillna(0)

for index in range(len(subtractionResults_4_df)):
    if subtractionResults_4_df.iloc[index, 0] < 0:
        subtractionResults_4_df.iloc[index, 0] = 0


#print('Fourth subtraction data: ', subtractionResults_4_df)

all_loads = pd.DataFrame(ac_power_output_df, columns = ['AC_Power', 'end_period'])
'''
all_loads['AC_Power_1'] = pd.Series(np.float64)
all_loads['AC_Power_2'] = pd.Series(np.float64)
all_loads['AC_Power_3'] = pd.Series(np.float64)
all_loads['AC_Power_1'] = domestic_heaters['AC_Power']
all_loads['AC_Power_2'] = chillers_df['AC_Power'] + chiller_power_thermal_store['AC_Power']
all_loads['AC_Power_3'] = freezer_farm['AC_Power']
'''

all_loads['Total_loads'] = freezer_farm['AC_Power'] + chiller_power_thermal_store['AC_Power'] + chillers_df['AC_Power'] + domestic_heaters['AC_Power']


# Loads
print('Domestic Water Heaters: ', domestic_heaters)
print('Chillers: ', chillers_df)
print('Chillers thermal store: ',chiller_power_thermal_store)
print('Freezer farm: ',freezer_farm)


print(all_loads)
print('-------------------')

# Power Generation
print('Solar Power: ', ac_power_output_df)
print('First subtraction data: ', subtractionResults_1_df)
print('Second subtraction data: ', subtractionResults_2_df)
print('Third subtraction data: ', subtractionResults_3_df)
print('Fourth subtraction data: ', subtractionResults_4_df)

print('-------------------')


# Plots
ax = ac_power_output_df.plot(x = 'end_period', y = 'AC_Power')
ax2 = all_loads.plot(x = 'end_period', y = 'Total_loads', ax = ax)

plt.ylabel("AC Power (kW)")
plt.title("Comparison between Generation and Load Profiles")
plt.grid()
plt.show()

#all_loads.to_csv('Loads_profile.csv', index = False)


# Loop to wait for 30 mins 
'''
index = 1
starttime_2 = time.time()
while(index <= 2):
    print("Small loop time: ", datetime.datetime.fromtimestamp(time.time()))
    time.sleep(60*30-((time.time() - starttime_2) % 60.0))
    index+=1
'''